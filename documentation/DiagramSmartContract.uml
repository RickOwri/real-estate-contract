@startuml

class Property {
  -propertyAddress: PropertyAddress
  -propertyData: PropertyData
  -propertyOwnerContact: PropertyOwnerContact
  -imagesCid: String[]
  +Property(PropertyAddress, PropertyData, PropertyOwnerContact, String[]): void
  +updatePropertyAddress(): void
  +updatePropertyData(): void
  +updatePropertyOwnerContact(): void
  +updateImagesCid(): void
  +getImagesCid(): String[]
}

class PropertyManager {
  -i_testToken: TestToken
  -properties: Property[]
  -fee: int
  -exchangeRatio: float
  -returnPenalty: float
  -minReturnAmount: int
  +PropertyManager(int, TestToken, float, float, int): void
  +createNewProperty(): void
  +purchaseTokens(): void
  +returnTokens(): void
  +updateExchangeRatio(): void
  +updateReturnPenalty(): void
  +updateMinReturnAmount(): void
  +updateFee(): void
  +getProperties(): Property[]
  +withdraw(): void
  +withdrawToken(): void
  +withdrawCustom(): void
}

class SharedStruct {
}

class PropertyAddress {
  +unitNumber: String
  +street: String
  +city: String
  +state: String
  +zip: String
  +country: String
}

class PropertyData {
  +name: String
  +description: String
  +propertyStatus: String
  +propertyType: String
  +landSize: String
  +pricePerSqft: String
  +bedrooms: String
  +bathrooms: String
  +yearBuilt: String
  +lastSoldPrice: String
  +lastSoldDate: String
}

class PropertyOwnerContact {
  +name: String
  +email: String
  +phone: String
}

class TestToken {
  +MINTER_ROLE: String
  +BURNER_ROLE: String
  +TestToken(): void
  +mint(String, int): void
  +burn(String, int): void
}

Property --|> SharedStruct
Property --|> PropertyAddress
Property --|> PropertyData
Property --|> PropertyOwnerContact

PropertyManager --|> Property

TestToken --|> PropertyManager

SharedStruct --|> PropertyAddress
SharedStruct --|> PropertyData
SharedStruct --|> PropertyOwnerContact

@enduml
