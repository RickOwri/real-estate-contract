{
  "address": "0x6CEEff350Fe6310759cB6C1Ac9f12acc5141ea9b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "contract TestToken",
          "name": "_testToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_returnPenalty",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minReturnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "property",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "PropertyCreated",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "unitNumber",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "street",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "city",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "state",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "zip",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "country",
              "type": "string"
            }
          ],
          "internalType": "struct SharedStruct.PropertyAddress",
          "name": "_propertyAddress",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "propertyStatus",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "propertyType",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "landSize",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "pricePerSqft",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bedrooms",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "bathrooms",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "yearBuilt",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lastSoldPrice",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lastSoldDate",
              "type": "string"
            }
          ],
          "internalType": "struct SharedStruct.PropertyData",
          "name": "_propertyData",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "email",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "phone",
              "type": "string"
            }
          ],
          "internalType": "struct SharedStruct.PropertyOwnerContact",
          "name": "_propertyOwnerContact",
          "type": "tuple"
        },
        {
          "internalType": "string[]",
          "name": "_imagesCid",
          "type": "string[]"
        }
      ],
      "name": "createNewProperty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProperties",
      "outputs": [
        {
          "internalType": "contract Property[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minReturnAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "properties",
      "outputs": [
        {
          "internalType": "contract Property",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "purchaseTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "returnPenalty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "returnTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeRatio",
          "type": "uint256"
        }
      ],
      "name": "updateExchangeRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "updateFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minReturnAmount",
          "type": "uint256"
        }
      ],
      "name": "updateMinReturnAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_returnPenalty",
          "type": "uint256"
        }
      ],
      "name": "updateReturnPenalty",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x062112e0c0d9c10c976825d3070bd4557a360362459ff6f539ef015c4e6fe8eb",
  "receipt": {
    "to": null,
    "from": "0xdFA4C3D580479eAb0dd0122cd6661fdc3215239f",
    "contractAddress": "0x6CEEff350Fe6310759cB6C1Ac9f12acc5141ea9b",
    "transactionIndex": 20,
    "gasUsed": "4862023",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000000000000000000000000000010000000000000008000002000080000000000000000000000000000000000000000000000800001000000000000240100000000000000100000020000000000000000000800000000000000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000002000000000000000000040000000004000000000000004000001000000000000000000000000000000100000000020000000000000000000000000000000000000000000000000000000000000100000",
    "blockHash": "0xecd5a46228429d80044bfa6336f53c990252136b6973f6e05e6986ca3f1d3511",
    "transactionHash": "0x062112e0c0d9c10c976825d3070bd4557a360362459ff6f539ef015c4e6fe8eb",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 36808045,
        "transactionHash": "0x062112e0c0d9c10c976825d3070bd4557a360362459ff6f539ef015c4e6fe8eb",
        "address": "0x6CEEff350Fe6310759cB6C1Ac9f12acc5141ea9b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000dfa4c3d580479eab0dd0122cd6661fdc3215239f"
        ],
        "data": "0x",
        "logIndex": 67,
        "blockHash": "0xecd5a46228429d80044bfa6336f53c990252136b6973f6e05e6986ca3f1d3511"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 36808045,
        "transactionHash": "0x062112e0c0d9c10c976825d3070bd4557a360362459ff6f539ef015c4e6fe8eb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000dfa4c3d580479eab0dd0122cd6661fdc3215239f",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000313ff6191fc98c0000000000000000000000000000000000000000000000000149d63ff4d8bb26000000000000000000000000000000000000000000001175296415061cda9a2300000000000000000000000000000000000000000000000001189649dbb8f19a000000000000000000000000000000000000000000001175299554fc35fa63af",
        "logIndex": 68,
        "blockHash": "0xecd5a46228429d80044bfa6336f53c990252136b6973f6e05e6986ca3f1d3511"
      }
    ],
    "blockNumber": 36808045,
    "cumulativeGasUsed": "7849918",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "5000000000000000000",
    "0xa3D4F27D60957A0D1E5066192C3Bf1c64077a8C0",
    1000,
    10,
    1
  ],
  "numDeployments": 9,
  "solcInputHash": "cf2a412c727566c5ba1d034a708ed0ea",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"contract TestToken\",\"name\":\"_testToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_returnPenalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minReturnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"PropertyCreated\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"unitNumber\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"street\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"city\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"state\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"zip\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"country\",\"type\":\"string\"}],\"internalType\":\"struct SharedStruct.PropertyAddress\",\"name\":\"_propertyAddress\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"propertyStatus\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"propertyType\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"landSize\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"pricePerSqft\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bedrooms\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"bathrooms\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"yearBuilt\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastSoldPrice\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lastSoldDate\",\"type\":\"string\"}],\"internalType\":\"struct SharedStruct.PropertyData\",\"name\":\"_propertyData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"email\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"phone\",\"type\":\"string\"}],\"internalType\":\"struct SharedStruct.PropertyOwnerContact\",\"name\":\"_propertyOwnerContact\",\"type\":\"tuple\"},{\"internalType\":\"string[]\",\"name\":\"_imagesCid\",\"type\":\"string[]\"}],\"name\":\"createNewProperty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProperties\",\"outputs\":[{\"internalType\":\"contract Property[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minReturnAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"properties\",\"outputs\":[{\"internalType\":\"contract Property\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"returnPenalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"returnTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRatio\",\"type\":\"uint256\"}],\"name\":\"updateExchangeRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minReturnAmount\",\"type\":\"uint256\"}],\"name\":\"updateMinReturnAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_returnPenalty\",\"type\":\"uint256\"}],\"name\":\"updateReturnPenalty\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PropertyManager.sol\":\"PropertyManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Property.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\nimport \\\"./SharedStruct.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Property is SharedStruct, Ownable {\\n    PropertyAddress public propertyAddress;\\n    PropertyData public propertyData;\\n    PropertyOwnerContact public propertyOwnerContact;\\n    string[] public imagesCid;\\n    constructor(\\n        PropertyAddress memory _propertyAddress,\\n        PropertyData memory _propertyData,\\n        PropertyOwnerContact memory _propertyOwnerContact,\\n        string[] memory _imagesCid\\n    ) {\\n        propertyAddress = _propertyAddress;\\n        propertyData = _propertyData;\\n        propertyOwnerContact = _propertyOwnerContact;\\n        imagesCid = _imagesCid;\\n    }\\n\\n    function updatePropertyAddress(\\n        PropertyAddress memory _propertyAddress\\n    ) external onlyOwner {\\n        propertyAddress = _propertyAddress;\\n    }\\n\\n    function updatePropertyData(\\n        PropertyData memory _propertyData\\n    ) external onlyOwner {\\n        propertyData = _propertyData;\\n    }\\n\\n    function updatePropertyOwnerContact(\\n        PropertyOwnerContact memory _propertyOwnerContact\\n    ) external onlyOwner {\\n        propertyOwnerContact = _propertyOwnerContact;\\n    }\\n\\n    function updateImagesCid(\\n        string[] memory _imagesCid\\n    ) external onlyOwner {\\n        imagesCid = _imagesCid;\\n    }\\n\\n    function getImagesCid() external view returns (string[] memory) {\\n        return imagesCid;\\n    }\\n}\\n\\n\",\"keccak256\":\"0x672d4b8fd5bf891de87b724331ce00d3159f2063741445883c0a4f37cf290173\",\"license\":\"GPL-3.0\"},\"contracts/PropertyManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"contracts/TestToken.sol\\\";\\nimport \\\"contracts/SharedStruct.sol\\\";\\nimport \\\"contracts/Property.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract PropertyManager is SharedStruct, Ownable {\\n    TestToken immutable i_testToken;\\n    Property[] public properties; //contract address of properties\\n    uint256 public fee;\\n    uint256 public exchangeRatio;\\n    uint256 public returnPenalty;\\n    uint256 public minReturnAmount;\\n    event PropertyCreated(address indexed property, address indexed owner);\\n\\n    constructor(\\n        uint256 _fee,\\n        TestToken _testToken,\\n        uint256 _exchangeRatio,\\n        uint256 _returnPenalty,\\n        uint256 _minReturnAmount\\n    ) {\\n        fee = _fee;\\n        i_testToken = _testToken;\\n        exchangeRatio = _exchangeRatio;\\n        returnPenalty = _returnPenalty;\\n        minReturnAmount = _minReturnAmount;\\n    }\\n\\n    fallback() external payable{\\n    }   \\n\\n    receive() external payable{\\n    }\\n\\n    modifier requireFeesPaid() {\\n        require(\\n            i_testToken.transferFrom(msg.sender, address(this), fee),\\n            \\\"Fees not paid\\\"\\n        );\\n        _;\\n    }\\n\\n    function createNewProperty(\\n        PropertyAddress memory _propertyAddress,\\n        PropertyData memory _propertyData,\\n        PropertyOwnerContact memory _propertyOwnerContact,\\n        string[] memory _imagesCid\\n    ) external requireFeesPaid {\\n        Property newProperty = new Property(\\n            _propertyAddress,\\n            _propertyData,\\n            _propertyOwnerContact,\\n            _imagesCid\\n        );\\n        properties.push(newProperty);\\n        // mapping (PropertyAddress => uint) name; // unit number | buildingnumber | ->property Contract A\\n        newProperty.transferOwnership(msg.sender);\\n        emit PropertyCreated(address(newProperty), msg.sender);\\n    }\\n\\n   \\n    function purchaseTokens() external payable {\\n        i_testToken.mint(msg.sender, msg.value * exchangeRatio);\\n    }\\n\\n    function returnTokens(uint256 amount) external payable {\\n        require(\\n            amount > minReturnAmount,\\n            \\\"Amount must be greater than minReturnAmount\\\"\\n        );\\n        // check token balance of user from mapping\\n        require(\\n            i_testToken.balanceOf(msg.sender) >= amount,\\n            \\\"Insufficient balance\\\"\\n        );\\n        uint256 penaltyAmount = (amount * returnPenalty) / 100;\\n        uint256 returnAmount = (amount - penaltyAmount) / exchangeRatio;\\n        i_testToken.burnFrom(msg.sender, amount); // approve it first\\n        payable(msg.sender).transfer(returnAmount);\\n    }\\n\\n    function updateExchangeRatio(uint256 _exchangeRatio) external onlyOwner {\\n        exchangeRatio = _exchangeRatio;\\n    }\\n\\n    function updateReturnPenalty(uint256 _returnPenalty) external onlyOwner {\\n        returnPenalty = _returnPenalty;\\n    }\\n\\n    function updateMinReturnAmount(\\n        uint256 _minReturnAmount\\n    ) external onlyOwner {\\n        minReturnAmount = _minReturnAmount;\\n    }\\n\\n    function updateFee(uint256 _fee) external onlyOwner {\\n        fee = _fee;\\n    }\\n\\n    function getProperties() external view returns (Property[] memory) {\\n        return properties;\\n    }\\n\\n    function withdraw() external onlyOwner {\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n}\\n\",\"keccak256\":\"0x3f8a53dc5e013128100afc63dac8d7f491ac253bfd72df02b023f0e91b9d6f37\",\"license\":\"GPL-3.0\"},\"contracts/SharedStruct.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.9;\\n\\ncontract SharedStruct {\\n    struct PropertyAddress {\\n        string unitNumber;\\n        string street;\\n        string city;\\n        string state;\\n        string zip;\\n        string country;\\n    }\\n    struct PropertyData {\\n        string name;\\n        string description;\\n        string propertyStatus;\\n        string propertyType;\\n        string landSize;\\n        string pricePerSqft;\\n        string bedrooms;\\n        string bathrooms;\\n        string yearBuilt;\\n        string lastSoldPrice;\\n        string lastSoldDate;\\n    }\\n    struct PropertyOwnerContact {\\n        string name;\\n        string email;\\n        string phone;\\n    }\\n}\\n\",\"keccak256\":\"0xdc539ebe72ecabde4b3c3546fb2a768c73c2823b4ff1045223ecf8fbdb01ff1f\",\"license\":\"GPL-3.0\"},\"contracts/TestToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\ncontract TestToken is ERC20, ERC20Burnable, AccessControl {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    bytes32 public constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n\\n    constructor() ERC20(\\\"TestToken\\\", \\\"TEST\\\") {\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(MINTER_ROLE, msg.sender);\\n        _grantRole(BURNER_ROLE, msg.sender);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n    \\n    function burn(address from, uint256 amount) public onlyRole(BURNER_ROLE) {  \\n        _burn(from, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x530515dde2682fb9f2a3f749ff73b837ca8f54e80fe00db4af82fbbb47e4d611\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620057fe380380620057fe833981810160405281019062000037919062000237565b620000576200004b620000b260201b60201c565b620000ba60201b60201c565b846002819055508373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508260038190555081600481905550806005819055505050505050620002bf565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620001988162000183565b8114620001a457600080fd5b50565b600081519050620001b8816200018d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001eb82620001be565b9050919050565b6000620001ff82620001de565b9050919050565b6200021181620001f2565b81146200021d57600080fd5b50565b600081519050620002318162000206565b92915050565b600080600080600060a086880312156200025657620002556200017e565b5b60006200026688828901620001a7565b9550506020620002798882890162000220565b94505060406200028c88828901620001a7565b93505060606200029f88828901620001a7565b9250506080620002b288828901620001a7565b9150509295509295909350565b60805161550e620002f060003960008181610405015281816104ef01528181610615015261074d015261550e6000f3fe6080604052600436106200011b5760003560e01c80637acde80811620000a3578063dcc780da116200006d578063dcc780da14620002fd578063ddca3f43146200032b578063ec0cfd0b146200035b578063f2fde38b146200038b578063f7b1080814620003b95762000123565b80637acde80814620002415780638da5cb5b146200026f5780639012c4a8146200029f578063a6f0bf6214620002cd5762000123565b80634006ccc511620000e55780634006ccc5146200019b57806364073b6f14620001cb57806366e772c414620001f9578063715018a614620002275762000123565b8063130d101614620001255780633290ce2914620001555780633ae1786f14620001615780633ccfd60b14620001815762000123565b366200012357005b005b3480156200013257600080fd5b506200013d620003fd565b6040516200014c919062000d1b565b60405180910390f35b6200015f62000403565b005b6200017f600480360381019062000179919062000d7d565b620004a5565b005b3480156200018e57600080fd5b5062000199620006f1565b005b348015620001a857600080fd5b50620001b362000745565b604051620001c2919062000d1b565b60405180910390f35b348015620001d857600080fd5b50620001f76004803603810190620001f19190620014ca565b6200074b565b005b3480156200020657600080fd5b506200022560048036038101906200021f919062000d7d565b620009aa565b005b3480156200023457600080fd5b506200023f620009be565b005b3480156200024e57600080fd5b506200026d600480360381019062000267919062000d7d565b620009d6565b005b3480156200027c57600080fd5b5062000287620009ea565b604051620002969190620015fd565b60405180910390f35b348015620002ac57600080fd5b50620002cb6004803603810190620002c5919062000d7d565b62000a13565b005b348015620002da57600080fd5b50620002e562000a27565b604051620002f4919062000d1b565b60405180910390f35b3480156200030a57600080fd5b5062000329600480360381019062000323919062000d7d565b62000a2d565b005b3480156200033857600080fd5b506200034362000a41565b60405162000352919062000d1b565b60405180910390f35b3480156200036857600080fd5b506200037362000a47565b60405162000382919062001742565b60405180910390f35b3480156200039857600080fd5b50620003b76004803603810190620003b1919062001797565b62000ad7565b005b348015620003c657600080fd5b50620003e56004803603810190620003df919062000d7d565b62000b61565b604051620003f49190620017da565b60405180910390f35b60055481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166340c10f19336003543462000450919062001826565b6040518363ffffffff1660e01b81526004016200046f92919062001871565b600060405180830381600087803b1580156200048a57600080fd5b505af11580156200049f573d6000803e3d6000fd5b50505050565b6005548111620004ec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004e39062001925565b60405180910390fd5b807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401620005489190620015fd565b602060405180830381865afa15801562000566573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200058c91906200195e565b1015620005d0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005c790620019e0565b60405180910390fd5b6000606460045483620005e4919062001826565b620005f0919062001a31565b90506000600354828462000605919062001a69565b62000611919062001a31565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166379cc679033856040518363ffffffff1660e01b81526004016200067092919062001871565b600060405180830381600087803b1580156200068b57600080fd5b505af1158015620006a0573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015620006eb573d6000803e3d6000fd5b50505050565b620006fb62000ba1565b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801562000742573d6000803e3d6000fd5b50565b60035481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd33306002546040518463ffffffff1660e01b8152600401620007ac9392919062001aa4565b6020604051808303816000875af1158015620007cc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620007f2919062001b1e565b62000834576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082b9062001ba0565b60405180910390fd5b600084848484604051620008489062000cf2565b62000857949392919062001f82565b604051809103906000f08015801562000874573d6000803e3d6000fd5b5090506001819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b336040518263ffffffff1660e01b8152600401620009159190620015fd565b600060405180830381600087803b1580156200093057600080fd5b505af115801562000945573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f4a743f9cfd435653e5ce31aa99ac3d4140af2413791addec975ccefc22de10c460405160405180910390a35050505050565b620009b462000ba1565b8060058190555050565b620009c862000ba1565b620009d4600062000c26565b565b620009e062000ba1565b8060048190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000a1d62000ba1565b8060028190555050565b60045481565b62000a3762000ba1565b8060038190555050565b60025481565b6060600180548060200260200160405190810160405280929190818152602001828054801562000acd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000a82575b5050505050905090565b62000ae162000ba1565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000b53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b4a9062002061565b60405180910390fd5b62000b5e8162000c26565b50565b6001818154811062000b7257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000bab62000cea565b73ffffffffffffffffffffffffffffffffffffffff1662000bcb620009ea565b73ffffffffffffffffffffffffffffffffffffffff161462000c24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000c1b90620020d3565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6133e380620020f683390190565b6000819050919050565b62000d158162000d00565b82525050565b600060208201905062000d32600083018462000d0a565b92915050565b6000604051905090565b600080fd5b600080fd5b62000d578162000d00565b811462000d6357600080fd5b50565b60008135905062000d778162000d4c565b92915050565b60006020828403121562000d965762000d9562000d42565b5b600062000da68482850162000d66565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000dff8262000db4565b810181811067ffffffffffffffff8211171562000e215762000e2062000dc5565b5b80604052505050565b600062000e3662000d38565b905062000e44828262000df4565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000e765762000e7562000dc5565b5b62000e818262000db4565b9050602081019050919050565b82818337600083830152505050565b600062000eb462000eae8462000e58565b62000e2a565b90508281526020810184848401111562000ed35762000ed262000e53565b5b62000ee084828562000e8e565b509392505050565b600082601f83011262000f005762000eff62000e4e565b5b813562000f1284826020860162000e9d565b91505092915050565b600060c0828403121562000f345762000f3362000daf565b5b62000f4060c062000e2a565b9050600082013567ffffffffffffffff81111562000f635762000f6262000e49565b5b62000f718482850162000ee8565b600083015250602082013567ffffffffffffffff81111562000f985762000f9762000e49565b5b62000fa68482850162000ee8565b602083015250604082013567ffffffffffffffff81111562000fcd5762000fcc62000e49565b5b62000fdb8482850162000ee8565b604083015250606082013567ffffffffffffffff81111562001002576200100162000e49565b5b620010108482850162000ee8565b606083015250608082013567ffffffffffffffff81111562001037576200103662000e49565b5b620010458482850162000ee8565b60808301525060a082013567ffffffffffffffff8111156200106c576200106b62000e49565b5b6200107a8482850162000ee8565b60a08301525092915050565b60006101608284031215620010a0576200109f62000daf565b5b620010ad61016062000e2a565b9050600082013567ffffffffffffffff811115620010d057620010cf62000e49565b5b620010de8482850162000ee8565b600083015250602082013567ffffffffffffffff81111562001105576200110462000e49565b5b620011138482850162000ee8565b602083015250604082013567ffffffffffffffff8111156200113a576200113962000e49565b5b620011488482850162000ee8565b604083015250606082013567ffffffffffffffff8111156200116f576200116e62000e49565b5b6200117d8482850162000ee8565b606083015250608082013567ffffffffffffffff811115620011a457620011a362000e49565b5b620011b28482850162000ee8565b60808301525060a082013567ffffffffffffffff811115620011d957620011d862000e49565b5b620011e78482850162000ee8565b60a08301525060c082013567ffffffffffffffff8111156200120e576200120d62000e49565b5b6200121c8482850162000ee8565b60c08301525060e082013567ffffffffffffffff81111562001243576200124262000e49565b5b620012518482850162000ee8565b60e08301525061010082013567ffffffffffffffff81111562001279576200127862000e49565b5b620012878482850162000ee8565b6101008301525061012082013567ffffffffffffffff811115620012b057620012af62000e49565b5b620012be8482850162000ee8565b6101208301525061014082013567ffffffffffffffff811115620012e757620012e662000e49565b5b620012f58482850162000ee8565b6101408301525092915050565b6000606082840312156200131b576200131a62000daf565b5b62001327606062000e2a565b9050600082013567ffffffffffffffff8111156200134a576200134962000e49565b5b620013588482850162000ee8565b600083015250602082013567ffffffffffffffff8111156200137f576200137e62000e49565b5b6200138d8482850162000ee8565b602083015250604082013567ffffffffffffffff811115620013b457620013b362000e49565b5b620013c28482850162000ee8565b60408301525092915050565b600067ffffffffffffffff821115620013ec57620013eb62000dc5565b5b602082029050602081019050919050565b600080fd5b6000620014196200141384620013ce565b62000e2a565b905080838252602082019050602084028301858111156200143f576200143e620013fd565b5b835b818110156200148d57803567ffffffffffffffff81111562001468576200146762000e4e565b5b80860162001477898262000ee8565b8552602085019450505060208101905062001441565b5050509392505050565b600082601f830112620014af57620014ae62000e4e565b5b8135620014c184826020860162001402565b91505092915050565b60008060008060808587031215620014e757620014e662000d42565b5b600085013567ffffffffffffffff81111562001508576200150762000d47565b5b620015168782880162000f1b565b945050602085013567ffffffffffffffff8111156200153a576200153962000d47565b5b620015488782880162001086565b935050604085013567ffffffffffffffff8111156200156c576200156b62000d47565b5b6200157a8782880162001302565b925050606085013567ffffffffffffffff8111156200159e576200159d62000d47565b5b620015ac8782880162001497565b91505092959194509250565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620015e582620015b8565b9050919050565b620015f781620015d8565b82525050565b6000602082019050620016146000830184620015ec565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b6000620016716200166b6200166584620015b8565b62001646565b620015b8565b9050919050565b6000620016858262001650565b9050919050565b6000620016998262001678565b9050919050565b620016ab816200168c565b82525050565b6000620016bf8383620016a0565b60208301905092915050565b6000602082019050919050565b6000620016e5826200161a565b620016f1818562001625565b9350620016fe8362001636565b8060005b8381101562001735578151620017198882620016b1565b97506200172683620016cb565b92505060018101905062001702565b5085935050505092915050565b600060208201905081810360008301526200175e8184620016d8565b905092915050565b6200177181620015d8565b81146200177d57600080fd5b50565b600081359050620017918162001766565b92915050565b600060208284031215620017b057620017af62000d42565b5b6000620017c08482850162001780565b91505092915050565b620017d4816200168c565b82525050565b6000602082019050620017f16000830184620017c9565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620018338262000d00565b9150620018408362000d00565b9250828202620018508162000d00565b915082820484148315176200186a5762001869620017f7565b5b5092915050565b6000604082019050620018886000830185620015ec565b62001897602083018462000d0a565b9392505050565b600082825260208201905092915050565b7f416d6f756e74206d7573742062652067726561746572207468616e206d696e5260008201527f657475726e416d6f756e74000000000000000000000000000000000000000000602082015250565b60006200190d602b836200189e565b91506200191a82620018af565b604082019050919050565b600060208201905081810360008301526200194081620018fe565b9050919050565b600081519050620019588162000d4c565b92915050565b60006020828403121562001977576200197662000d42565b5b6000620019878482850162001947565b91505092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000620019c86014836200189e565b9150620019d58262001990565b602082019050919050565b60006020820190508181036000830152620019fb81620019b9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062001a3e8262000d00565b915062001a4b8362000d00565b92508262001a5e5762001a5d62001a02565b5b828204905092915050565b600062001a768262000d00565b915062001a838362000d00565b925082820390508181111562001a9e5762001a9d620017f7565b5b92915050565b600060608201905062001abb6000830186620015ec565b62001aca6020830185620015ec565b62001ad9604083018462000d0a565b949350505050565b60008115159050919050565b62001af88162001ae1565b811462001b0457600080fd5b50565b60008151905062001b188162001aed565b92915050565b60006020828403121562001b375762001b3662000d42565b5b600062001b478482850162001b07565b91505092915050565b7f46656573206e6f74207061696400000000000000000000000000000000000000600082015250565b600062001b88600d836200189e565b915062001b958262001b50565b602082019050919050565b6000602082019050818103600083015262001bbb8162001b79565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562001bfe57808201518184015260208101905062001be1565b60008484015250505050565b600062001c178262001bc2565b62001c23818562001bcd565b935062001c3581856020860162001bde565b62001c408162000db4565b840191505092915050565b600060c083016000830151848203600086015262001c6a828262001c0a565b9150506020830151848203602086015262001c86828262001c0a565b9150506040830151848203604086015262001ca2828262001c0a565b9150506060830151848203606086015262001cbe828262001c0a565b9150506080830151848203608086015262001cda828262001c0a565b91505060a083015184820360a086015262001cf6828262001c0a565b9150508091505092915050565b600061016083016000830151848203600086015262001d23828262001c0a565b9150506020830151848203602086015262001d3f828262001c0a565b9150506040830151848203604086015262001d5b828262001c0a565b9150506060830151848203606086015262001d77828262001c0a565b9150506080830151848203608086015262001d93828262001c0a565b91505060a083015184820360a086015262001daf828262001c0a565b91505060c083015184820360c086015262001dcb828262001c0a565b91505060e083015184820360e086015262001de7828262001c0a565b91505061010083015184820361010086015262001e05828262001c0a565b91505061012083015184820361012086015262001e23828262001c0a565b91505061014083015184820361014086015262001e41828262001c0a565b9150508091505092915050565b6000606083016000830151848203600086015262001e6d828262001c0a565b9150506020830151848203602086015262001e89828262001c0a565b9150506040830151848203604086015262001ea5828262001c0a565b9150508091505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062001eec838362001c0a565b905092915050565b6000602082019050919050565b600062001f0e8262001eb2565b62001f1a818562001ebd565b93508360208202850162001f2e8562001ece565b8060005b8581101562001f70578484038952815162001f4e858262001ede565b945062001f5b8362001ef4565b925060208a0199505060018101905062001f32565b50829750879550505050505092915050565b6000608082019050818103600083015262001f9e818762001c4b565b9050818103602083015262001fb4818662001d03565b9050818103604083015262001fca818562001e4e565b9050818103606083015262001fe0818462001f01565b905095945050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000620020496026836200189e565b9150620020568262001feb565b604082019050919050565b600060208201905081810360008301526200207c816200203a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000620020bb6020836200189e565b9150620020c88262002083565b602082019050919050565b60006020820190508181036000830152620020ee81620020ac565b905091905056fe60806040523480156200001157600080fd5b50604051620033e3380380620033e3833981810160405281019062000037919062000b74565b620000576200004b6200026f60201b60201c565b6200027760201b60201c565b836001600082015181600001908162000071919062000ead565b50602082015181600101908162000089919062000ead565b506040820151816002019081620000a1919062000ead565b506060820151816003019081620000b9919062000ead565b506080820151816004019081620000d1919062000ead565b5060a0820151816005019081620000e9919062000ead565b50905050826007600082015181600001908162000107919062000ead565b5060208201518160010190816200011f919062000ead565b50604082015181600201908162000137919062000ead565b5060608201518160030190816200014f919062000ead565b50608082015181600401908162000167919062000ead565b5060a08201518160050190816200017f919062000ead565b5060c082015181600601908162000197919062000ead565b5060e0820151816007019081620001af919062000ead565b50610100820151816008019081620001c8919062000ead565b50610120820151816009019081620001e1919062000ead565b5061014082015181600a019081620001fa919062000ead565b50905050816012600082015181600001908162000218919062000ead565b50602082015181600101908162000230919062000ead565b50604082015181600201908162000248919062000ead565b509050508060159080519060200190620002649291906200033b565b505050505062000f94565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000388579160200282015b828111156200038757825182908162000376919062000ead565b50916020019190600101906200035c565b5b5090506200039791906200039b565b5090565b5b80821115620003bf5760008181620003b59190620003c3565b506001016200039c565b5090565b508054620003d19062000c9c565b6000825580601f10620003e5575062000406565b601f01602090049060005260206000209081019062000405919062000409565b5b50565b5b80821115620004245760008160009055506001016200040a565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200048c8262000441565b810181811067ffffffffffffffff82111715620004ae57620004ad62000452565b5b80604052505050565b6000620004c362000428565b9050620004d1828262000481565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111562000503576200050262000452565b5b6200050e8262000441565b9050602081019050919050565b60005b838110156200053b5780820151818401526020810190506200051e565b60008484015250505050565b60006200055e6200055884620004e5565b620004b7565b9050828152602081018484840111156200057d576200057c620004e0565b5b6200058a8482856200051b565b509392505050565b600082601f830112620005aa57620005a9620004db565b5b8151620005bc84826020860162000547565b91505092915050565b600060c08284031215620005de57620005dd6200043c565b5b620005ea60c0620004b7565b9050600082015167ffffffffffffffff8111156200060d576200060c620004d6565b5b6200061b8482850162000592565b600083015250602082015167ffffffffffffffff811115620006425762000641620004d6565b5b620006508482850162000592565b602083015250604082015167ffffffffffffffff811115620006775762000676620004d6565b5b620006858482850162000592565b604083015250606082015167ffffffffffffffff811115620006ac57620006ab620004d6565b5b620006ba8482850162000592565b606083015250608082015167ffffffffffffffff811115620006e157620006e0620004d6565b5b620006ef8482850162000592565b60808301525060a082015167ffffffffffffffff811115620007165762000715620004d6565b5b620007248482850162000592565b60a08301525092915050565b600061016082840312156200074a57620007496200043c565b5b62000757610160620004b7565b9050600082015167ffffffffffffffff8111156200077a5762000779620004d6565b5b620007888482850162000592565b600083015250602082015167ffffffffffffffff811115620007af57620007ae620004d6565b5b620007bd8482850162000592565b602083015250604082015167ffffffffffffffff811115620007e457620007e3620004d6565b5b620007f28482850162000592565b604083015250606082015167ffffffffffffffff811115620008195762000818620004d6565b5b620008278482850162000592565b606083015250608082015167ffffffffffffffff8111156200084e576200084d620004d6565b5b6200085c8482850162000592565b60808301525060a082015167ffffffffffffffff811115620008835762000882620004d6565b5b620008918482850162000592565b60a08301525060c082015167ffffffffffffffff811115620008b857620008b7620004d6565b5b620008c68482850162000592565b60c08301525060e082015167ffffffffffffffff811115620008ed57620008ec620004d6565b5b620008fb8482850162000592565b60e08301525061010082015167ffffffffffffffff811115620009235762000922620004d6565b5b620009318482850162000592565b6101008301525061012082015167ffffffffffffffff8111156200095a5762000959620004d6565b5b620009688482850162000592565b6101208301525061014082015167ffffffffffffffff811115620009915762000990620004d6565b5b6200099f8482850162000592565b6101408301525092915050565b600060608284031215620009c557620009c46200043c565b5b620009d16060620004b7565b9050600082015167ffffffffffffffff811115620009f457620009f3620004d6565b5b62000a028482850162000592565b600083015250602082015167ffffffffffffffff81111562000a295762000a28620004d6565b5b62000a378482850162000592565b602083015250604082015167ffffffffffffffff81111562000a5e5762000a5d620004d6565b5b62000a6c8482850162000592565b60408301525092915050565b600067ffffffffffffffff82111562000a965762000a9562000452565b5b602082029050602081019050919050565b600080fd5b600062000ac362000abd8462000a78565b620004b7565b9050808382526020820190506020840283018581111562000ae95762000ae862000aa7565b5b835b8181101562000b3757805167ffffffffffffffff81111562000b125762000b11620004db565b5b80860162000b21898262000592565b8552602085019450505060208101905062000aeb565b5050509392505050565b600082601f83011262000b595762000b58620004db565b5b815162000b6b84826020860162000aac565b91505092915050565b6000806000806080858703121562000b915762000b9062000432565b5b600085015167ffffffffffffffff81111562000bb25762000bb162000437565b5b62000bc087828801620005c5565b945050602085015167ffffffffffffffff81111562000be45762000be362000437565b5b62000bf28782880162000730565b935050604085015167ffffffffffffffff81111562000c165762000c1562000437565b5b62000c2487828801620009ac565b925050606085015167ffffffffffffffff81111562000c485762000c4762000437565b5b62000c568782880162000b41565b91505092959194509250565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168062000cb557607f821691505b60208210810362000ccb5762000cca62000c6d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830262000d357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000cf6565b62000d41868362000cf6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000d8e62000d8862000d828462000d59565b62000d63565b62000d59565b9050919050565b6000819050919050565b62000daa8362000d6d565b62000dc262000db98262000d95565b84845462000d03565b825550505050565b600090565b62000dd962000dca565b62000de681848462000d9f565b505050565b5b8181101562000e0e5762000e0260008262000dcf565b60018101905062000dec565b5050565b601f82111562000e5d5762000e278162000cd1565b62000e328462000ce6565b8101602085101562000e42578190505b62000e5a62000e518562000ce6565b83018262000deb565b50505b505050565b600082821c905092915050565b600062000e826000198460080262000e62565b1980831691505092915050565b600062000e9d838362000e6f565b9150826002028217905092915050565b62000eb88262000c62565b67ffffffffffffffff81111562000ed45762000ed362000452565b5b62000ee0825462000c9c565b62000eed82828562000e12565b600060209050601f83116001811462000f25576000841562000f10578287015190505b62000f1c858262000e8f565b86555062000f8c565b601f19841662000f358662000cd1565b60005b8281101562000f5f5784890151825560018201915060208501945060208101905062000f38565b8683101562000f7f578489015162000f7b601f89168262000e6f565b8355505b6001600288020188555050505b505050505050565b61243f8062000fa46000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c8063715018a611610071578063715018a6146101885780638da5cb5b146101925780639cbad456146101b0578063ba16a53c146101ce578063e678560a146101ea578063f2fde38b1461020a576100b4565b806314d57e8b146100b95780631ccf7af0146100e1578063208dabc8146100fd57806329838b87146101195780634c872b6d1461013557806366440d7114610165575b600080fd5b6100c1610226565b6040516100d89b9a99989796959493929190611459565b60405180910390f35b6100fb60048036038101906100f691906118e4565b610846565b005b610117600480360381019061011291906119e5565b61094c565b005b610133600480360381019061012e9190611b14565b61099f565b005b61014f600480360381019061014a9190611b93565b6109c1565b60405161015c9190611bc0565b60405180910390f35b61016d610a6d565b60405161017f96959493929190611be2565b60405180910390f35b610190610dc7565b005b61019a610ddb565b6040516101a79190611cae565b60405180910390f35b6101b8610e04565b6040516101c59190611dd5565b60405180910390f35b6101e860048036038101906101e39190611f3f565b610edd565b005b6101f2610f72565b60405161020193929190611f88565b60405180910390f35b610224600480360381019061021f9190612000565b611122565b005b60078060000180546102379061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546102639061205c565b80156102b05780601f10610285576101008083540402835291602001916102b0565b820191906000526020600020905b81548152906001019060200180831161029357829003601f168201915b5050505050908060010180546102c59061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546102f19061205c565b801561033e5780601f106103135761010080835404028352916020019161033e565b820191906000526020600020905b81548152906001019060200180831161032157829003601f168201915b5050505050908060020180546103539061205c565b80601f016020809104026020016040519081016040528092919081815260200182805461037f9061205c565b80156103cc5780601f106103a1576101008083540402835291602001916103cc565b820191906000526020600020905b8154815290600101906020018083116103af57829003601f168201915b5050505050908060030180546103e19061205c565b80601f016020809104026020016040519081016040528092919081815260200182805461040d9061205c565b801561045a5780601f1061042f5761010080835404028352916020019161045a565b820191906000526020600020905b81548152906001019060200180831161043d57829003601f168201915b50505050509080600401805461046f9061205c565b80601f016020809104026020016040519081016040528092919081815260200182805461049b9061205c565b80156104e85780601f106104bd576101008083540402835291602001916104e8565b820191906000526020600020905b8154815290600101906020018083116104cb57829003601f168201915b5050505050908060050180546104fd9061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546105299061205c565b80156105765780601f1061054b57610100808354040283529160200191610576565b820191906000526020600020905b81548152906001019060200180831161055957829003601f168201915b50505050509080600601805461058b9061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546105b79061205c565b80156106045780601f106105d957610100808354040283529160200191610604565b820191906000526020600020905b8154815290600101906020018083116105e757829003601f168201915b5050505050908060070180546106199061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546106459061205c565b80156106925780601f1061066757610100808354040283529160200191610692565b820191906000526020600020905b81548152906001019060200180831161067557829003601f168201915b5050505050908060080180546106a79061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546106d39061205c565b80156107205780601f106106f557610100808354040283529160200191610720565b820191906000526020600020905b81548152906001019060200180831161070357829003601f168201915b5050505050908060090180546107359061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546107619061205c565b80156107ae5780601f10610783576101008083540402835291602001916107ae565b820191906000526020600020905b81548152906001019060200180831161079157829003601f168201915b50505050509080600a0180546107c39061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546107ef9061205c565b801561083c5780601f106108115761010080835404028352916020019161083c565b820191906000526020600020905b81548152906001019060200180831161081f57829003601f168201915b505050505090508b565b61084e6111a5565b80600760008201518160000190816108669190612239565b50602082015181600101908161087c9190612239565b5060408201518160020190816108929190612239565b5060608201518160030190816108a89190612239565b5060808201518160040190816108be9190612239565b5060a08201518160050190816108d49190612239565b5060c08201518160060190816108ea9190612239565b5060e08201518160070190816109009190612239565b506101008201518160080190816109179190612239565b5061012082015181600901908161092e9190612239565b5061014082015181600a0190816109459190612239565b5090505050565b6109546111a5565b806012600082015181600001908161096c9190612239565b5060208201518160010190816109829190612239565b5060408201518160020190816109989190612239565b5090505050565b6109a76111a5565b80601590805190602001906109bd9291906112ef565b5050565b601581815481106109d157600080fd5b9060005260206000200160009150905080546109ec9061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a189061205c565b8015610a655780601f10610a3a57610100808354040283529160200191610a65565b820191906000526020600020905b815481529060010190602001808311610a4857829003601f168201915b505050505081565b6001806000018054610a7e9061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610aaa9061205c565b8015610af75780601f10610acc57610100808354040283529160200191610af7565b820191906000526020600020905b815481529060010190602001808311610ada57829003601f168201915b505050505090806001018054610b0c9061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b389061205c565b8015610b855780601f10610b5a57610100808354040283529160200191610b85565b820191906000526020600020905b815481529060010190602001808311610b6857829003601f168201915b505050505090806002018054610b9a9061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610bc69061205c565b8015610c135780601f10610be857610100808354040283529160200191610c13565b820191906000526020600020905b815481529060010190602001808311610bf657829003601f168201915b505050505090806003018054610c289061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c549061205c565b8015610ca15780601f10610c7657610100808354040283529160200191610ca1565b820191906000526020600020905b815481529060010190602001808311610c8457829003601f168201915b505050505090806004018054610cb69061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ce29061205c565b8015610d2f5780601f10610d0457610100808354040283529160200191610d2f565b820191906000526020600020905b815481529060010190602001808311610d1257829003601f168201915b505050505090806005018054610d449061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610d709061205c565b8015610dbd5780601f10610d9257610100808354040283529160200191610dbd565b820191906000526020600020905b815481529060010190602001808311610da057829003601f168201915b5050505050905086565b610dcf6111a5565b610dd96000611223565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606015805480602002602001604051908101604052809291908181526020016000905b82821015610ed4578382906000526020600020018054610e479061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610e739061205c565b8015610ec05780601f10610e9557610100808354040283529160200191610ec0565b820191906000526020600020905b815481529060010190602001808311610ea357829003601f168201915b505050505081526020019060010190610e28565b50505050905090565b610ee56111a5565b8060016000820151816000019081610efd9190612239565b506020820151816001019081610f139190612239565b506040820151816002019081610f299190612239565b506060820151816003019081610f3f9190612239565b506080820151816004019081610f559190612239565b5060a0820151816005019081610f6b9190612239565b5090505050565b6012806000018054610f839061205c565b80601f0160208091040260200160405190810160405280929190818152602001828054610faf9061205c565b8015610ffc5780601f10610fd157610100808354040283529160200191610ffc565b820191906000526020600020905b815481529060010190602001808311610fdf57829003601f168201915b5050505050908060010180546110119061205c565b80601f016020809104026020016040519081016040528092919081815260200182805461103d9061205c565b801561108a5780601f1061105f5761010080835404028352916020019161108a565b820191906000526020600020905b81548152906001019060200180831161106d57829003601f168201915b50505050509080600201805461109f9061205c565b80601f01602080910402602001604051908101604052809291908181526020018280546110cb9061205c565b80156111185780601f106110ed57610100808354040283529160200191611118565b820191906000526020600020905b8154815290600101906020018083116110fb57829003601f168201915b5050505050905083565b61112a6111a5565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611199576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111909061237d565b60405180910390fd5b6111a281611223565b50565b6111ad6112e7565b73ffffffffffffffffffffffffffffffffffffffff166111cb610ddb565b73ffffffffffffffffffffffffffffffffffffffff1614611221576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611218906123e9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b828054828255906000526020600020908101928215611337579160200282015b828111156113365782518290816113269190612239565b509160200191906001019061130f565b5b5090506113449190611348565b5090565b5b80821115611368576000818161135f919061136c565b50600101611349565b5090565b5080546113789061205c565b6000825580601f1061138a57506113a9565b601f0160209004906000526020600020908101906113a891906113ac565b5b50565b5b808211156113c55760008160009055506001016113ad565b5090565b600081519050919050565b600082825260208201905092915050565b60005b838110156114035780820151818401526020810190506113e8565b60008484015250505050565b6000601f19601f8301169050919050565b600061142b826113c9565b61143581856113d4565b93506114458185602086016113e5565b61144e8161140f565b840191505092915050565b6000610160820190508181036000830152611474818e611420565b90508181036020830152611488818d611420565b9050818103604083015261149c818c611420565b905081810360608301526114b0818b611420565b905081810360808301526114c4818a611420565b905081810360a08301526114d88189611420565b905081810360c08301526114ec8188611420565b905081810360e08301526115008187611420565b90508181036101008301526115158186611420565b905081810361012083015261152a8185611420565b905081810361014083015261153f8184611420565b90509c9b505050505050505050505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6115a28261140f565b810181811067ffffffffffffffff821117156115c1576115c061156a565b5b80604052505050565b60006115d4611551565b90506115e08282611599565b919050565b600080fd5b600080fd5b600080fd5b600067ffffffffffffffff82111561160f5761160e61156a565b5b6116188261140f565b9050602081019050919050565b82818337600083830152505050565b6000611647611642846115f4565b6115ca565b905082815260208101848484011115611663576116626115ef565b5b61166e848285611625565b509392505050565b600082601f83011261168b5761168a6115ea565b5b813561169b848260208601611634565b91505092915050565b600061016082840312156116bb576116ba611565565b5b6116c66101606115ca565b9050600082013567ffffffffffffffff8111156116e6576116e56115e5565b5b6116f284828501611676565b600083015250602082013567ffffffffffffffff811115611716576117156115e5565b5b61172284828501611676565b602083015250604082013567ffffffffffffffff811115611746576117456115e5565b5b61175284828501611676565b604083015250606082013567ffffffffffffffff811115611776576117756115e5565b5b61178284828501611676565b606083015250608082013567ffffffffffffffff8111156117a6576117a56115e5565b5b6117b284828501611676565b60808301525060a082013567ffffffffffffffff8111156117d6576117d56115e5565b5b6117e284828501611676565b60a08301525060c082013567ffffffffffffffff811115611806576118056115e5565b5b61181284828501611676565b60c08301525060e082013567ffffffffffffffff811115611836576118356115e5565b5b61184284828501611676565b60e08301525061010082013567ffffffffffffffff811115611867576118666115e5565b5b61187384828501611676565b6101008301525061012082013567ffffffffffffffff811115611899576118986115e5565b5b6118a584828501611676565b6101208301525061014082013567ffffffffffffffff8111156118cb576118ca6115e5565b5b6118d784828501611676565b6101408301525092915050565b6000602082840312156118fa576118f961155b565b5b600082013567ffffffffffffffff81111561191857611917611560565b5b611924848285016116a4565b91505092915050565b60006060828403121561194357611942611565565b5b61194d60606115ca565b9050600082013567ffffffffffffffff81111561196d5761196c6115e5565b5b61197984828501611676565b600083015250602082013567ffffffffffffffff81111561199d5761199c6115e5565b5b6119a984828501611676565b602083015250604082013567ffffffffffffffff8111156119cd576119cc6115e5565b5b6119d984828501611676565b60408301525092915050565b6000602082840312156119fb576119fa61155b565b5b600082013567ffffffffffffffff811115611a1957611a18611560565b5b611a258482850161192d565b91505092915050565b600067ffffffffffffffff821115611a4957611a4861156a565b5b602082029050602081019050919050565b600080fd5b6000611a72611a6d84611a2e565b6115ca565b90508083825260208201905060208402830185811115611a9557611a94611a5a565b5b835b81811015611adc57803567ffffffffffffffff811115611aba57611ab96115ea565b5b808601611ac78982611676565b85526020850194505050602081019050611a97565b5050509392505050565b600082601f830112611afb57611afa6115ea565b5b8135611b0b848260208601611a5f565b91505092915050565b600060208284031215611b2a57611b2961155b565b5b600082013567ffffffffffffffff811115611b4857611b47611560565b5b611b5484828501611ae6565b91505092915050565b6000819050919050565b611b7081611b5d565b8114611b7b57600080fd5b50565b600081359050611b8d81611b67565b92915050565b600060208284031215611ba957611ba861155b565b5b6000611bb784828501611b7e565b91505092915050565b60006020820190508181036000830152611bda8184611420565b905092915050565b600060c0820190508181036000830152611bfc8189611420565b90508181036020830152611c108188611420565b90508181036040830152611c248187611420565b90508181036060830152611c388186611420565b90508181036080830152611c4c8185611420565b905081810360a0830152611c608184611420565b9050979650505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c9882611c6d565b9050919050565b611ca881611c8d565b82525050565b6000602082019050611cc36000830184611c9f565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000611d11826113c9565b611d1b8185611cf5565b9350611d2b8185602086016113e5565b611d348161140f565b840191505092915050565b6000611d4b8383611d06565b905092915050565b6000602082019050919050565b6000611d6b82611cc9565b611d758185611cd4565b935083602082028501611d8785611ce5565b8060005b85811015611dc35784840389528151611da48582611d3f565b9450611daf83611d53565b925060208a01995050600181019050611d8b565b50829750879550505050505092915050565b60006020820190508181036000830152611def8184611d60565b905092915050565b600060c08284031215611e0d57611e0c611565565b5b611e1760c06115ca565b9050600082013567ffffffffffffffff811115611e3757611e366115e5565b5b611e4384828501611676565b600083015250602082013567ffffffffffffffff811115611e6757611e666115e5565b5b611e7384828501611676565b602083015250604082013567ffffffffffffffff811115611e9757611e966115e5565b5b611ea384828501611676565b604083015250606082013567ffffffffffffffff811115611ec757611ec66115e5565b5b611ed384828501611676565b606083015250608082013567ffffffffffffffff811115611ef757611ef66115e5565b5b611f0384828501611676565b60808301525060a082013567ffffffffffffffff811115611f2757611f266115e5565b5b611f3384828501611676565b60a08301525092915050565b600060208284031215611f5557611f5461155b565b5b600082013567ffffffffffffffff811115611f7357611f72611560565b5b611f7f84828501611df7565b91505092915050565b60006060820190508181036000830152611fa28186611420565b90508181036020830152611fb68185611420565b90508181036040830152611fca8184611420565b9050949350505050565b611fdd81611c8d565b8114611fe857600080fd5b50565b600081359050611ffa81611fd4565b92915050565b6000602082840312156120165761201561155b565b5b600061202484828501611feb565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061207457607f821691505b6020821081036120875761208661202d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026120ef7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826120b2565b6120f986836120b2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061213661213161212c84611b5d565b612111565b611b5d565b9050919050565b6000819050919050565b6121508361211b565b61216461215c8261213d565b8484546120bf565b825550505050565b600090565b61217961216c565b612184818484612147565b505050565b5b818110156121a85761219d600082612171565b60018101905061218a565b5050565b601f8211156121ed576121be8161208d565b6121c7846120a2565b810160208510156121d6578190505b6121ea6121e2856120a2565b830182612189565b50505b505050565b600082821c905092915050565b6000612210600019846008026121f2565b1980831691505092915050565b600061222983836121ff565b9150826002028217905092915050565b612242826113c9565b67ffffffffffffffff81111561225b5761225a61156a565b5b612265825461205c565b6122708282856121ac565b600060209050601f8311600181146122a35760008415612291578287015190505b61229b858261221d565b865550612303565b601f1984166122b18661208d565b60005b828110156122d9578489015182556001820191506020850194506020810190506122b4565b868310156122f657848901516122f2601f8916826121ff565b8355505b6001600288020188555050505b505050505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006123676026836113d4565b91506123728261230b565b604082019050919050565b600060208201905081810360008301526123968161235a565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006123d36020836113d4565b91506123de8261239d565b602082019050919050565b60006020820190508181036000830152612402816123c6565b905091905056fea2646970667358221220bbcb2e5e5317f0ca0259ef4ab2ef649547b1102eb49a2a62d0d30ecc9de9bf3c64736f6c63430008120033a264697066735822122027f4a335e4e04066b90674a62e276da56eb11109050951190378b14137a0bb9264736f6c63430008120033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2625,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "properties",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_contract(Property)2607)dyn_storage"
      },
      {
        "astId": 2627,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2629,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "exchangeRatio",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2631,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "returnPenalty",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2633,
        "contract": "contracts/PropertyManager.sol:PropertyManager",
        "label": "minReturnAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(Property)2607)dyn_storage": {
        "base": "t_contract(Property)2607",
        "encoding": "dynamic_array",
        "label": "contract Property[]",
        "numberOfBytes": "32"
      },
      "t_contract(Property)2607": {
        "encoding": "inplace",
        "label": "contract Property",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}